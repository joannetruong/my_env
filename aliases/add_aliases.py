import argparse
import glob
import os
import os.path as osp
import subprocess
import time
import sys
from sys import platform

from generate_executables import generate_executables


def main(args):
    operating_systems = {
        "linux": "ubuntu",
        "darwin": "macOS",
    }
    assert platform in operating_systems, "Can't determine operating system!"

    op_sys = operating_systems[platform]
    print("Detected operating system:", op_sys)
    if args.user_input:
        correct_os = ""
    else:
        correct_os = "y"
    while correct_os.lower() not in ["y", "n"]:
        correct_os = input("Is this correct? [Y/n]: ")
        if not correct_os:
            correct_os = "y"
    if correct_os == "n":
        print("Aborting.")
        exit()

    header = "# >>> BEGINNING OF THINGS ADDED BY my_env REPO>>>\n"
    footer = "\n# <<< END OF THINGS ADDED BY my_env REPO<<<\n"

    # Erase existing block generated by this script if it exists
    home_dir = osp.join(os.environ["HOME"])
    local_aliases_file = osp.join(home_dir, ".bash_aliases")
    if osp.isfile(local_aliases_file):
        with open(local_aliases_file) as f:
            data = f.read()
        if data.count(header) == 1 and data.count(footer) == 1:
            data = data.split(header)[0] + data.split(footer)[-1]
            print(
                "Erasing old block generated previously by this script from "
                f"{local_aliases_file}..."
            )
            with open(local_aliases_file, "w") as f:
                f.write(data)

    added_aliases = header
    this_dir = osp.dirname(osp.abspath(__file__))

    # Add general aliases first
    general_aliases = osp.join(this_dir, "general.sh")
    with open(general_aliases) as f:
        added_aliases += f.read() + "\n"
    print(f"Loading general aliases from '{general_aliases}'...")

    # Add OS-specific aliases
    if op_sys == "ubuntu":
        os_aliases = osp.join(this_dir, "ubuntu.sh")
    else:  # macOS
        os_aliases = osp.join(this_dir, "macos.sh")
        # Add command to source ~/.bash_aliases if it doesn't exist yet
        bash_profile = osp.join(home_dir, ".bash_profile")
        if osp.isfile(bash_profile):
            with open(bash_profile) as f:
                data = f.read()
        else:
            data = ""
        src_alias_cmd = "source ~/.bash_aliases"
        if src_alias_cmd not in data:
            with open(bash_profile, "a+") as f:
                f.write(data + "\n" + src_alias_cmd + "\n")
            print(f"Wrote '{src_alias_cmd}' to {bash_profile}, b/c it wasn't there before.")

    # Load OS-specific aliases from this repo
    with open(os_aliases) as f:
        added_aliases += f.read() + "\n"
    print(f"Loading OS-specific aliases from '{os_aliases}'...")

    # Add slurm aliases if desired
    if args is None:
        add_slurm = ""
        while add_slurm.lower() not in ["y", "n"]:
            add_slurm = input("Add slurm aliases? [y/N]: ")
            if not add_slurm:
                add_slurm = "n"
    else:
        add_slurm = args.add_slurm
    if add_slurm == "y":
        slurm_aliases = osp.join(this_dir, "slurm.sh")
        print(f"Loading slurm aliases from '{slurm_aliases}'...")
        with open(slurm_aliases) as f:
            added_aliases += f.read() + "\n"
    else:
        print("Not adding slurm aliases.")
        time.sleep(0.5)

    # Replace environment variable with valid path to this repo
    my_env_repo = osp.dirname(this_dir)
    added_aliases = added_aliases.replace("<MY_ENV_REPO>", my_env_repo)
    if args is None:
        default_remote_host = input("Specify default remote host (default=''): ")
    else:
        default_remote_host = args.default_host
    added_aliases = added_aliases.replace("<DEFAULT_REMOTE_HOST>", default_remote_host)
    added_aliases += footer

    # Prepend added aliases to existing ones, if there are existing ones
    if osp.isfile(local_aliases_file):
        with open(local_aliases_file) as f:
            added_aliases += f.read()
    with open(local_aliases_file, "w") as f:
        f.write(added_aliases)

    print(
        f"Successfully pre-pended all aliases to '{local_aliases_file}'! "
        "Your existing ones will thus not be overwritten."
    )

    bin_dir = osp.join(my_env_repo, "bin")
    for exe in glob.glob(osp.join(bin_dir, "*")):
        subprocess.check_call(f"chmod +x {exe}".split())
    print(f"Successfully made all scripts in '{bin_dir}' executable! Added to PATH.")

    generate_executables()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--add-slurm", "-s", default="n")
    parser.add_argument("--default-host", "-d", default="")
    parser.add_argument("--user-input", action="store_true")
    args = parser.parse_args()
    main(args)
